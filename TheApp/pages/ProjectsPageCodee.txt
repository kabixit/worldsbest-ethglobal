import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  Grid,
  GridItem,
  Button,
  useColorModeValue,
  Spinner,
  Flex,
} from '@chakra-ui/react';
import { useContract, useContractRead, useAddress } from '@thirdweb-dev/react';
import { useRouter } from 'next/router';

const ProjectsPage = () => {
  const { contract: projectContract } = useContract('0x4BE413C64db50FB52A73e7521e9AaC5438C66bB8'); // Replace with your project contract address
  const [projects, setProjects] = useState([]);
  const router = useRouter();

  const { data: projectCount, isLoading, error } = useContractRead(projectContract, 'getProjectsCount', []);

  useEffect(() => {
    if (projectCount) {
      fetchProjects(projectCount);
    }
  }, [projectCount]);

  const fetchProjects = async (count) => {
    const projectPromises = [];
  
    for (let i = 0; i < count; i++) {
      projectPromises.push(projectContract.call('projects', [i]));
    }
  
    try {
      const projectResults = await Promise.all(projectPromises);
      const projects = projectResults.map((result, index) => {
        const [name, votecount, status] = result;
  
        return {
          name,
          votecount,
          status,
        };
      });
  
      setProjects(projects);
    } catch (error) {
      console.error(error);
      setProjects([]);
    }
  };
  
  const handleViewProject = (projectId) => {
    // You can navigate to a project detail page or take other actions.
    // router.push(`/project/${projectId}`);
  };

  if (isLoading) {
    return (
      <Flex h="100vh" alignItems="center" justifyContent="center">
        <Spinner size="xl" color="teal" />
      </Flex>
    );
  }

  if (error) {
    return <div>Error: {error.message}</div>;
  }

  const boxBgColor = useColorModeValue('gray.200', 'gray.700');
  const textColor = useColorModeValue('gray.800', 'gray.200');

  return (
    <Box p={8} bg={useColorModeValue('gray.100', 'gray.900')}>
      <Heading mb={4} color={useColorModeValue('gray.800', 'gray.200')}>
        Projects
      </Heading>
      {projects.length === 0 ? (
        <Text color={textColor}>No projects available.</Text>
      ) : (
        <>
          <Grid templateColumns="repeat(2, 1fr)" gap={6}>
            {projects.map((project) => (
              <GridItem key={project.id}>
                <Box p={4} borderWidth={1} borderRadius="md" shadow="md" bg={boxBgColor}>
                  <Heading
                    as="h3"
                    size="md"
                    mb={2}
                    color={useColorModeValue('gray.800', 'gray.200')}
                  >
                    {project.name.toString()}
                  </Heading>
                  <Text mb={2} color={textColor}>
                    Votes: {project.votecount.toNumber()}
                  </Text>
                  <Button
                    colorScheme="teal"
                    mt={4}
                    onClick={() => handleViewProject(project.id)}
                    _hover={{ bg: 'teal.500', color: 'white' }}
                    _focus={{ outline: 'none' }}
                  >
                    View Project
                  </Button>
                </Box>
              </GridItem>
            ))}
          </Grid>
        </>
      )}
    </Box>
  );
};

export default ProjectsPage;
